   private static final String TAG = "TAG";
    JavaCameraView mCamera;
    File cascFile;

    CascadeClassifier faceDetector;
    private Mat mRgba, mGray;


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mCamera = (JavaCameraView) findViewById(R.id.javaCamView);
        mCamera.setCvCameraViewListener(this);

        if(!OpenCVLoader.initDebug()) {
            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_0_0,this,baseLoaderCallback);
        }
        else {
                baseLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);
        }




        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
                != PackageManager.PERMISSION_GRANTED) {
            // More code here ...
        } else {
            Log.d("TAG : ", "Permissions granted");
            mCamera.setCameraPermissionGranted();
            if(OpenCVLoader.initDebug()) {

                    baseLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);

            }


        }

    }


    @Override
    protected void onResume() {

        super.onResume();
        if (!OpenCVLoader.initDebug()) {
            Log.d(TAG, "Internal OpenCV library not found. Using OpenCV Manager for initialization");
            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_9, this, baseLoaderCallback);
        } else {
            Log.d(TAG, "OpenCV library found inside package. Using it!");
            baseLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        if (mCamera != null)
            mCamera.disableView();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mCamera != null)
            mCamera.disableView();
    }

    @Override
    public void onCameraViewStarted(int width, int height) {
        mRgba = new Mat();
        mGray = new Mat();
    }

    @Override
    public void onCameraViewStopped() {

    }

    @Override
    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {
        mRgba = inputFrame.rgba();
        mGray = inputFrame.gray();

        //detect frame
        MatOfRect faceDetections = new MatOfRect();
        faceDetector.detectMultiScale(mRgba,faceDetections);

        for(Rect rect : faceDetections.toArray()) {
            Imgproc.rectangle(mRgba, new Point(rect.x,rect.y),
                    new Point(rect.x+rect.width,rect.y+rect.height),
                    new Scalar(255,0,0));
        }

        return  mRgba;
    }



    private BaseLoaderCallback baseLoaderCallback = new BaseLoaderCallback(this) {
        @Override
        public void onManagerConnected(int status) {
            switch (status) {
                case LoaderCallbackInterface.SUCCESS:


                    InputStream is = getResources().openRawResource(R.raw.lbpcascade_frontalface);
                    File cascadeDir = getDir("cascade",Context.MODE_PRIVATE);
                    cascFile = new File(cascadeDir,"lbpcascade_frontalface.xml");

                    FileOutputStream fos = null;
                    try {
                        fos = new FileOutputStream(cascFile);
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    }
                    byte[] buffer = new byte[4096];
                    int bytesRead = 0;

                    while (true) {
                        try {
                            if (!((bytesRead = is.read(buffer)) != -1)) break;
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        try {
                            fos.write(buffer,0,bytesRead);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    try {
                        is.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    try {
                        fos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    faceDetector = new CascadeClassifier(cascFile.getAbsolutePath());
                    if(faceDetector.empty())
                    {
                        faceDetector = null;
                    }
                    else
                        cascadeDir.delete();

                    break;

                default:
                {
                    super.onManagerConnected(status);
                }
                break;
            }


        }

        @Override
        public void onPackageInstall(int operation, InstallCallbackInterface callback) {
            super.onPackageInstall(operation, callback);
        }
    };
